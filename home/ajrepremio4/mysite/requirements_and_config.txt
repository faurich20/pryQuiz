# requirements.txt
Flask==2.3.0
Flask-Mail==0.9.1
PyMySQL==1.1.0
cryptography==41.0.0 # paquete para encriptar contrase√±as


# ================================
# database_schema.sql
# Script SQL para crear la base de datos manualmente (opcional)
# ================================

-- Crear base de datos
CREATE DATABASE IF NOT EXISTS quiz_platform CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE quiz_platform;

-- Tabla de usuarios
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(64) NOT NULL,
    is_teacher BOOLEAN DEFAULT 0,
    is_verified BOOLEAN DEFAULT 0,
    verification_code VARCHAR(6),
    verification_expires DATETIME,
    reset_token VARCHAR(64),
    reset_expires DATETIME,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_username (username),
    INDEX idx_email (email)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Tabla de quizzes
CREATE TABLE IF NOT EXISTS quizzes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    teacher_id INT NOT NULL,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    pin_code VARCHAR(8) UNIQUE NOT NULL,
    mode VARCHAR(20) DEFAULT 'individual',
    countdown_time INT DEFAULT 30,
    is_public BOOLEAN DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (teacher_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_pin_code (pin_code),
    INDEX idx_teacher (teacher_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Tabla de preguntas
CREATE TABLE IF NOT EXISTS questions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    quiz_id INT NOT NULL,
    question_text TEXT NOT NULL,
    image_url VARCHAR(500),
    video_url VARCHAR(500),
    time_limit INT DEFAULT 30,
    position INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (quiz_id) REFERENCES quizzes(id) ON DELETE CASCADE,
    INDEX idx_quiz (quiz_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Tabla de opciones
CREATE TABLE IF NOT EXISTS options (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question_id INT NOT NULL,
    option_text VARCHAR(500) NOT NULL,
    is_correct BOOLEAN DEFAULT 0,
    position INT NOT NULL,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE,
    INDEX idx_question (question_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Tabla de sesiones de juego
CREATE TABLE IF NOT EXISTS game_sessions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    quiz_id INT NOT NULL,
    pin_code VARCHAR(8) NOT NULL,
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ended_at TIMESTAMP NULL,
    is_active BOOLEAN DEFAULT 1,
    FOREIGN KEY (quiz_id) REFERENCES quizzes(id) ON DELETE CASCADE,
    INDEX idx_quiz (quiz_id),
    INDEX idx_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Tabla de participantes
CREATE TABLE IF NOT EXISTS participants (
    id INT AUTO_INCREMENT PRIMARY KEY,
    session_id INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    total_score INT DEFAULT 0,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (session_id) REFERENCES game_sessions(id) ON DELETE CASCADE,
    INDEX idx_session (session_id),
    INDEX idx_score (total_score)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Tabla de respuestas
CREATE TABLE IF NOT EXISTS answers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    participant_id INT NOT NULL,
    question_id INT NOT NULL,
    option_id INT NOT NULL,
    response_time FLOAT NOT NULL,
    points_earned INT DEFAULT 0,
    answered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (participant_id) REFERENCES participants(id) ON DELETE CASCADE,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE,
    FOREIGN KEY (option_id) REFERENCES options(id) ON DELETE CASCADE,
    INDEX idx_participant (participant_id),
    INDEX idx_question (question_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Insertar datos de ejemplo (opcional)
-- Usuario profesor de prueba (contrase√±a: Test123!)
INSERT INTO users (username, email, password, is_teacher, is_verified) 
VALUES ('profesor_demo', 'profesor@ejemplo.com', 
        'f6f2ea8f45d8a057ca9cd6b8f1b3d3d1e7c3f9e8c3f0e5b8d9e1f7c8a9b5c3d2', 
        1, 1);


# ================================
# config.py
# Archivo de configuraci√≥n separado (recomendado para producci√≥n)
# ================================

import os

class Config:
    """Configuraci√≥n base"""
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
    
    # Configuraci√≥n de MySQL
    DB_HOST = os.environ.get('DB_HOST') or 'localhost'
    DB_USER = os.environ.get('DB_USER') or 'root'
    DB_PASSWORD = os.environ.get('DB_PASSWORD') or ''
    DB_NAME = os.environ.get('DB_NAME') or 'quiz_platform'
    
    # Configuraci√≥n de correo
    MAIL_SERVER = os.environ.get('MAIL_SERVER') or 'smtp.gmail.com'
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
    MAIL_DEFAULT_SENDER = os.environ.get('MAIL_DEFAULT_SENDER') or 'noreply@quizplatform.com'

class DevelopmentConfig(Config):
    """Configuraci√≥n de desarrollo"""
    DEBUG = True
    TESTING = False

class ProductionConfig(Config):
    """Configuraci√≥n de producci√≥n"""
    DEBUG = False
    TESTING = False
    
    # En producci√≥n, todas las variables deben venir de environment
    @property
    def SECRET_KEY(self):
        secret = os.environ.get('SECRET_KEY')
        if not secret:
            raise ValueError("SECRET_KEY debe estar configurado en producci√≥n")
        return secret

class TestingConfig(Config):
    """Configuraci√≥n para testing"""
    TESTING = True
    DEBUG = True
    DB_NAME = 'quiz_platform_test'

# Diccionario de configuraciones
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}


# ================================
# .env.example
# Plantilla para variables de entorno
# Copia este archivo a .env y configura tus valores
# ================================

# Flask
SECRET_KEY=tu_clave_secreta_muy_larga_y_segura_aqui
FLASK_ENV=development

# Base de datos MySQL
DB_HOST=localhost
DB_USER=quiz_user
DB_PASSWORD=tu_contrase√±a_mysql
DB_NAME=quiz_platform

# Correo electr√≥nico
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=true
MAIL_USERNAME=tu_email@gmail.com
MAIL_PASSWORD=tu_contrase√±a_de_aplicacion
MAIL_DEFAULT_SENDER=noreply@quizplatform.com


# ================================
# .gitignore
# Archivos a ignorar en Git
# ================================

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Flask
instance/
.webassets-cache

# Environment variables
.env
.env.local

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Database
*.db
*.sqlite
*.sqlite3

# Backup files
*.bak
*.backup


# ================================
# README.md
# Documentaci√≥n principal del proyecto
# ================================

# üéØ QuizPlatform

Plataforma web interactiva de aprendizaje gamificado para crear y jugar quizzes educativos en tiempo real.

## üöÄ Inicio R√°pido

### Instalaci√≥n

1. Clona el repositorio
2. Instala dependencias: `pip install -r requirements.txt`
3. Configura la base de datos MySQL
4. Configura variables de entorno (copia .env.example a .env)
5. Ejecuta: `python app.py`
6. Accede a: `http://localhost:5000`

## üìã Caracter√≠sticas

- ‚úÖ Sistema de autenticaci√≥n con verificaci√≥n de email
- ‚úÖ Creaci√≥n de quizzes con preguntas multimedia
- ‚úÖ Modo individual y grupal
- ‚úÖ Puntuaci√≥n en tiempo real
- ‚úÖ Ranking de jugadores
- ‚úÖ Recuperaci√≥n de contrase√±a
- ‚úÖ Interfaz responsive

## üõ†Ô∏è Tecnolog√≠as

- **Backend**: Flask (Python)
- **Base de Datos**: MySQL / MariaDB
- **Frontend**: HTML5, CSS3, JavaScript
- **Email**: Flask-Mail

## üìñ Documentaci√≥n Completa

Ver `INSTALLATION_GUIDE.md` para instrucciones detalladas.

## üîê Seguridad

- Contrase√±as hasheadas
- Verificaci√≥n de email obligatoria
- Tokens seguros para recuperaci√≥n
- Protecci√≥n contra SQL injection
- Validaci√≥n de datos del lado del servidor

## üìù Licencia

MIT License

## üë®‚Äçüíª Desarrollo

Desarrollado como plataforma educativa de M-Learning y Gamificaci√≥n.

---

**¬°Feliz aprendizaje! üéìüéÆ**